/**************************************************************************
**
** This file is part of Qt Creator
**
** Copyright (c) 2011 Nokia Corporation and/or its subsidiary(-ies).
**
** Contact: Nokia Corporation (info@qt.nokia.com)
**
**
** GNU Lesser General Public License Usage
**
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this file.
** Please review the following information to ensure the GNU Lesser General
** Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** Other Usage
**
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**************************************************************************/

//
//  W A R N I N G
//  -------------
//
// This file is not part of the Qt API.  It exists for the convenience
// of other Qt classes.  This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
//

// This file was generated by qlalr - DO NOT EDIT!
#ifndef GLSLPARSERTABLE_P_H
#define GLSLPARSERTABLE_P_H

#include <QtCore/qglobal.h>

QT_BEGIN_NAMESPACE

class GLSLParserTable
{
public:
  enum VariousConstants {
    EOF_SYMBOL = 0,
    TOK_ADD_ASSIGN = 3,
    TOK_AMPERSAND = 4,
    TOK_AND_ASSIGN = 5,
    TOK_AND_OP = 6,
    TOK_ATTRIBUTE = 7,
    TOK_BANG = 8,
    TOK_BOOL = 9,
    TOK_BREAK = 10,
    TOK_BVEC2 = 11,
    TOK_BVEC3 = 12,
    TOK_BVEC4 = 13,
    TOK_CARET = 14,
    TOK_CASE = 15,
    TOK_CENTROID = 16,
    TOK_COLON = 17,
    TOK_COMMA = 18,
    TOK_COMMENT = 172,
    TOK_CONST = 19,
    TOK_CONTINUE = 20,
    TOK_DASH = 21,
    TOK_DEC_OP = 22,
    TOK_DEFAULT = 23,
    TOK_DISCARD = 24,
    TOK_DIV_ASSIGN = 25,
    TOK_DMAT2 = 26,
    TOK_DMAT2X2 = 27,
    TOK_DMAT2X3 = 28,
    TOK_DMAT2X4 = 29,
    TOK_DMAT3 = 30,
    TOK_DMAT3X2 = 31,
    TOK_DMAT3X3 = 32,
    TOK_DMAT3X4 = 33,
    TOK_DMAT4 = 34,
    TOK_DMAT4X2 = 35,
    TOK_DMAT4X3 = 36,
    TOK_DMAT4X4 = 37,
    TOK_DO = 38,
    TOK_DOT = 39,
    TOK_DOUBLE = 40,
    TOK_DVEC2 = 41,
    TOK_DVEC3 = 42,
    TOK_DVEC4 = 43,
    TOK_ELSE = 44,
    TOK_EQUAL = 45,
    TOK_EQ_OP = 46,
    TOK_ERROR = 173,
    TOK_FALSE = 170,
    TOK_FEED_EXPRESSION = 2,
    TOK_FEED_GLSL = 1,
    TOK_FLAT = 47,
    TOK_FLOAT = 48,
    TOK_FOR = 49,
    TOK_GE_OP = 50,
    TOK_HIGHP = 51,
    TOK_IDENTIFIER = 52,
    TOK_IF = 53,
    TOK_IN = 54,
    TOK_INC_OP = 55,
    TOK_INOUT = 56,
    TOK_INT = 57,
    TOK_INVARIANT = 58,
    TOK_ISAMPLER1D = 59,
    TOK_ISAMPLER1DARRAY = 60,
    TOK_ISAMPLER2D = 61,
    TOK_ISAMPLER2DARRAY = 62,
    TOK_ISAMPLER2DMS = 63,
    TOK_ISAMPLER2DMSARRAY = 64,
    TOK_ISAMPLER2DRECT = 65,
    TOK_ISAMPLER3D = 66,
    TOK_ISAMPLERBUFFER = 67,
    TOK_ISAMPLERCUBE = 68,
    TOK_ISAMPLERCUBEARRAY = 69,
    TOK_IVEC2 = 70,
    TOK_IVEC3 = 71,
    TOK_IVEC4 = 72,
    TOK_LAYOUT = 73,
    TOK_LEFT_ANGLE = 74,
    TOK_LEFT_ASSIGN = 75,
    TOK_LEFT_BRACE = 76,
    TOK_LEFT_BRACKET = 77,
    TOK_LEFT_OP = 78,
    TOK_LEFT_PAREN = 79,
    TOK_LE_OP = 80,
    TOK_LOWP = 81,
    TOK_MAT2 = 82,
    TOK_MAT2X2 = 83,
    TOK_MAT2X3 = 84,
    TOK_MAT2X4 = 85,
    TOK_MAT3 = 86,
    TOK_MAT3X2 = 87,
    TOK_MAT3X3 = 88,
    TOK_MAT3X4 = 89,
    TOK_MAT4 = 90,
    TOK_MAT4X2 = 91,
    TOK_MAT4X3 = 92,
    TOK_MAT4X4 = 93,
    TOK_MEDIUMP = 94,
    TOK_MOD_ASSIGN = 95,
    TOK_MUL_ASSIGN = 96,
    TOK_NE_OP = 97,
    TOK_NOPERSPECTIVE = 98,
    TOK_NUMBER = 99,
    TOK_OR_ASSIGN = 100,
    TOK_OR_OP = 101,
    TOK_OUT = 102,
    TOK_PATCH = 103,
    TOK_PERCENT = 104,
    TOK_PLUS = 105,
    TOK_PRECISION = 106,
    TOK_PREPROC = 171,
    TOK_QUESTION = 107,
    TOK_RESERVED = 174,
    TOK_RETURN = 108,
    TOK_RIGHT_ANGLE = 109,
    TOK_RIGHT_ASSIGN = 110,
    TOK_RIGHT_BRACE = 111,
    TOK_RIGHT_BRACKET = 112,
    TOK_RIGHT_OP = 113,
    TOK_RIGHT_PAREN = 114,
    TOK_SAMPLE = 115,
    TOK_SAMPLER1D = 116,
    TOK_SAMPLER1DARRAY = 117,
    TOK_SAMPLER1DARRAYSHADOW = 118,
    TOK_SAMPLER1DSHADOW = 119,
    TOK_SAMPLER2D = 120,
    TOK_SAMPLER2DARRAY = 121,
    TOK_SAMPLER2DARRAYSHADOW = 122,
    TOK_SAMPLER2DMS = 123,
    TOK_SAMPLER2DMSARRAY = 124,
    TOK_SAMPLER2DRECT = 125,
    TOK_SAMPLER2DRECTSHADOW = 126,
    TOK_SAMPLER2DSHADOW = 127,
    TOK_SAMPLER3D = 128,
    TOK_SAMPLERBUFFER = 129,
    TOK_SAMPLERCUBE = 130,
    TOK_SAMPLERCUBEARRAY = 131,
    TOK_SAMPLERCUBEARRAYSHADOW = 132,
    TOK_SAMPLERCUBESHADOW = 133,
    TOK_SEMICOLON = 134,
    TOK_SLASH = 135,
    TOK_SMOOTH = 136,
    TOK_STAR = 137,
    TOK_STRUCT = 138,
    TOK_SUBROUTINE = 139,
    TOK_SUB_ASSIGN = 140,
    TOK_SWITCH = 141,
    TOK_TILDE = 142,
    TOK_TRUE = 169,
    TOK_TYPE_NAME = 143,
    TOK_UINT = 144,
    TOK_UNIFORM = 145,
    TOK_USAMPLER1D = 146,
    TOK_USAMPLER1DARRAY = 147,
    TOK_USAMPLER2D = 148,
    TOK_USAMPLER2DARRAY = 149,
    TOK_USAMPLER2DMS = 150,
    TOK_USAMPLER2DMSARRAY = 151,
    TOK_USAMPLER2DRECT = 152,
    TOK_USAMPLER3D = 153,
    TOK_USAMPLERBUFFER = 154,
    TOK_USAMPLERCUBE = 155,
    TOK_USAMPLERCUBEARRAY = 156,
    TOK_UVEC2 = 157,
    TOK_UVEC3 = 158,
    TOK_UVEC4 = 159,
    TOK_VARYING = 160,
    TOK_VEC2 = 161,
    TOK_VEC3 = 162,
    TOK_VEC4 = 163,
    TOK_VERTICAL_BAR = 164,
    TOK_VOID = 165,
    TOK_WHILE = 166,
    TOK_XOR_ASSIGN = 167,
    TOK_XOR_OP = 168,

    ACCEPT_STATE = 462,
    RULE_COUNT = 316,
    STATE_COUNT = 463,
    TERMINAL_COUNT = 175,
    NON_TERMINAL_COUNT = 85,

    GOTO_INDEX_OFFSET = 463,
    GOTO_INFO_OFFSET = 4681,
    GOTO_CHECK_OFFSET = 4681
  };

  static const char  *const    spell [];
  static const short             lhs [];
  static const short             rhs [];
  static const short    goto_default [];
  static const short  action_default [];
  static const short    action_index [];
  static const short     action_info [];
  static const short    action_check [];

  static inline int nt_action (int state, int nt)
  {
    const int yyn = action_index [GOTO_INDEX_OFFSET + state] + nt;
    if (yyn < 0 || action_check [GOTO_CHECK_OFFSET + yyn] != nt)
      return goto_default [nt];

    return action_info [GOTO_INFO_OFFSET + yyn];
  }

  static inline int t_action (int state, int token)
  {
    const int yyn = action_index [state] + token;

    if (yyn < 0 || action_check [yyn] != token)
      return - action_default [state];

    return action_info [yyn];
  }
};


QT_END_NAMESPACE
#endif // GLSLPARSERTABLE_P_H

